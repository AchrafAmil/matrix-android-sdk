/* 
 * Copyright 2014 OpenMarket Ltd
 * Copyright 2017 Vector Creations Ltd
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.matrix.androidsdk.rest.api;

import org.matrix.androidsdk.rest.model.BulkLookupParams;
import org.matrix.androidsdk.rest.model.BulkLookupResponse;
import org.matrix.androidsdk.rest.model.pid.DeleteDeviceParams;

import java.util.Map;

import retrofit.Callback;
import retrofit.http.Body;
import retrofit.http.GET;
import retrofit.http.POST;
import retrofit.http.Path;
import retrofit.http.Query;

public interface ThirdPidApi {

    /**
     * Get the 3rd party id from a medium
     *
     * @param address  the address.
     * @param medium   the medium.
     * @param callback the asynchronous callback called with the response
     */
    @GET("/lookup")
    void lookup3Pid(@Query("address") String address,
                    @Query("medium") String medium, Callback<DeleteDeviceParams.PidResponse> callback);

    /**
     * Request a bunch of 3PIDs
     *
     * @param body     teh body request
     * @param callback the asynchronous callback.
     */
    @POST("/bulk_lookup")
    void bulkLookup(@Body BulkLookupParams body, Callback<BulkLookupResponse> callback);

    /**
     * Request the ownership validation of an email address or a phone number previously set
     * by {@link ProfileApi#requestEmailValidation(DeleteDeviceParams.RequestEmailValidationParams, Callback)}
     *
     * @param medium       the medium of the 3pid
     * @param token        the token generated by the requestToken call
     * @param clientSecret the client secret which was supplied in the requestToken call
     * @param sid          the sid for the session
     * @param callback     asynchronous callback response
     */
    @POST("/validate/{medium}/submitToken")
    void requestOwnershipValidation(@Path("medium") String medium,
                                    @Query("token") String token,
                                    @Query("client_secret") String clientSecret,
                                    @Query("sid") String sid, Callback<Map<String, Object>> callback);
}
