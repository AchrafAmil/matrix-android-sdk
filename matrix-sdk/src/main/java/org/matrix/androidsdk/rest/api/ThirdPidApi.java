/* 
 * Copyright 2014 OpenMarket Ltd
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.matrix.androidsdk.rest.api;

import retrofit.Callback;
import retrofit.http.Body;
import retrofit.http.GET;
import retrofit.http.POST;
import retrofit.http.Query;

import org.matrix.androidsdk.rest.model.PidResponse;
import org.matrix.androidsdk.rest.model.RequestEmailValidationResponse;
import org.matrix.androidsdk.rest.model.ThreePidsParams;

import java.util.List;
import java.util.Map;

public interface ThirdPidApi {

    /**
     * Get the 3rd party id from a medium
     * @param address the address.
     * @param medium the medium.
     * @param callback the asynchronous callback called with the response
     */
    @GET("/lookup")
    void lookup3Pid(@Query("address") String address, @Query("medium") String medium, Callback<PidResponse> callback);

    /**
     * Request a bunch of 3PIDs
     * @param body teh body request
     * @param callback the asynchronous callback.
     */
    @POST("/lookup")
    void lookup3Pids(@Body ThreePidsParams body, Callback<List<List<String>>> callback);

    /**
     * Request an email validation
     * @param clientSecret the client secret
     * @param email the email address
     * @param sendAttempt the attempt count
     * @param nextLink the next link
     * @param callback the asynchronous callback called with the response
     */
    @POST("/validate/email/requestToken")
    void requestEmailValidation(@Query("client_secret") String clientSecret, @Query("email") String email, @Query("send_attempt") Integer sendAttempt, @Query("next_link") String nextLink, Callback<RequestEmailValidationResponse> callback);

    /**
     * Request the ownership validation of an email address previously set
     * by {@link #requestEmailValidation(String, String, Integer, String, Callback)}.
     * @param token the token generated by the requestToken call
     * @param clientSecret the client secret which was supplied in the requestToken call
     * @param sid the sid for the session
     * @param callback asynchronous callback response
     */
    @POST("/validate/email/submitToken")
    void requestEmailOwnershipValidation(@Query("token") String token, @Query("client_secret") String clientSecret, @Query("sid") String sid, Callback<Map<String,Object>> callback);
}
